export default"\n/******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\nvar __webpack_exports__ = {};\n\n;// CONCATENATED MODULE: ./injectedJS/messaging/remoteFunction.js\nclass RemoteFn {\n    static remoteFunctions = {};\n\n    constructor(name, fn) {\n        this.name = name;\n        RemoteFn.remoteFunctions[name] = fn;\n    }\n\n    static execute(name, args) {\n        const parsedArgs = JSON.parse(args);\n        RemoteFn.remoteFunctions[name]?.(...parsedArgs);\n    }\n}\n\nwindow.RemoteFn = RemoteFn;\n;// CONCATENATED MODULE: ./injectedJS/messaging/emitMessage.js\n\n\nlet prevMsgs = {};\n\nfunction emitMessage(msg, data) {\n    let stringified = JSON.stringify({ msg, data }, (key, value) => {\n        if (typeof value === 'function') {\n            return '[function] - did you mean to make a remote function?';\n        }\n        if (value instanceof RemoteFn) {\n            return '[remote function]: ' + value.name;\n        }\n        return value;\n    });\n    if (msg === 'log'|| prevMsgs[msg] !== stringified) {\n        prevMsgs[msg] = stringified;\n        window.ReactNativeWebView.postMessage(stringified);\n    }\n}\n;// CONCATENATED MODULE: ./injectedJS/initializers/fixConsoleLog.js\n\n\nfunction fixConsoleLog() {\n    console.log = (...data) => {\n        if (data.length === 1) {\n            emitMessage\n            emitMessage('log', data[0]);\n        } else {\n            emitMessage('log', data);\n        }\n    };\n}\n;// CONCATENATED MODULE: ./injectedJS/watchers/Watcher.js\n\n\n\nclass Watcher {\n    static _observer = null;\n    static _callbacks = {};\n\n    static watch(selector, callback) {\n        const id = Math.random().toString(32).slice(2);\n        Watcher._callbacks[id] = { selector, callback };\n        return id;\n    }\n\n    static stop(id) {\n        delete Watcher._callbacks[id];\n    }\n\n    static watchOnce(selector) {\n        return new Promise(res => {\n            const watch = Watcher.watch(selector, (elem) => {\n                Watcher.stop(watch);\n                res(elem);\n            });\n        });\n    }\n\n    static _start() {\n        const observer = new MutationObserver(mutations => {\n            Object.values(Watcher._callbacks).forEach(value => {\n                const { selector, callback } = value;\n                const elem = document.querySelector(selector);\n                if (elem) {\n                    callback(elem);\n                }\n            });\n        });\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true\n        });\n    }\n}\n\nWatcher._start();\n;// CONCATENATED MODULE: ./injectedJS/initializers/killOpenAppMsg.js\n\n\nasync function killOpenAppMsg() {\n    const btnContainer = await Watcher.watchOnce('.XPromoPopupRpl__actions');\n    const btn = btnContainer.children[1].querySelector('.XPromoPopupRpl__actionButton');\n    btn.click();\n}\n;// CONCATENATED MODULE: ./injectedJS/helpers/simClick.js\nfunction triggerMouseEvent(node, eventType) {\n    let clickEvent = document.createEvent('MouseEvents');\n    clickEvent.initEvent(eventType, true, true);\n    node.dispatchEvent(clickEvent);\n}\n\nfunction simClick(element) {\n    [\"mouseover\", \"mousedown\", \"mouseup\", \"click\"].forEach(e =>\n        triggerMouseEvent(element, e)\n    );\n}\n;// CONCATENATED MODULE: ./injectedJS/initializers/openSubredditList.js\n\n\n\nasync function openSubredditList() {\n    const subredditBtn = await Watcher.watchOnce('[aria-label=\"Start typing to filter your communities or use up and down to select.\"] > button');\n    simClick(subredditBtn);\n}\n;// CONCATENATED MODULE: ./injectedJS/initializers/index.js\n\n\n\n\nfunction initializers() {\n    fixConsoleLog();\n    killOpenAppMsg();\n    openSubredditList();\n}\n;// CONCATENATED MODULE: ./injectedJS/helpers/debounce.js\nconst events = {};\n\n/**\n * \n * @param {string} id - unique id for the function to debounce\n * @param {number} delay - delay before the function is called\n * @param {number} maxDelay - maximum delay after which to call the next function call happens immediately\n * @param {Function} fn - function to call\n */\nfunction debounce(id, delay, maxDelay, fn) {\n    const now = Date.now();\n    const timeoutFn = () => {\n        fn();\n        delete events[id];\n    }\n    if (!events[id]) {\n        events[id] = {\n            last: now,\n            timeout: setTimeout(timeoutFn, delay),\n        };\n    } else if (events[id] && (now - events[id].last > maxDelay)) {\n        clearTimeout(events[id].timeout);\n        delete events[id];\n        fn();\n    } else {\n        clearTimeout(events[id].timeout);\n        events[id].timeout = setTimeout(timeoutFn, delay);\n    }\n}\n;// CONCATENATED MODULE: ./injectedJS/watchers/Comments.js\n\n\n\n\n\nlet commentData = [];\n\nconst addComment = (path, comment) => {\n    let current = commentData;\n    path.forEach((index, i) => {\n        if (i === path.length - 1) {\n            current[index] = comment;\n        } else {\n            current = current[index].children;\n        }\n    });\n}\n\nconst getComment = (path) => {\n    let current = commentData;\n    for (let i = 0; i < path.length; i++) {\n        let index = path[i];\n        if (i === path.length - 1) {\n            return current[index];\n        } else {\n            current = current[index].children;\n        }\n    };\n}\n\n\nasync function comments() {\n    Watcher.watch('[data-scroller-first]', () => {\n        const commentContainerElems = [...[...document.querySelectorAll('[data-scroller-first]')]\n            .slice(-1)[0]\n            .parentElement\n            .children];\n\n        // Click to open all collapsed elements\n        [...document.querySelectorAll('.Comment .icon-expand')].filter(icn => getComputedStyle(icn.parentNode).opacity === '1').forEach(icn => icn.click());\n\n        // Adds attributes to all spoilers and headers for detection in HTML renderer\n        document.querySelectorAll('span, div').forEach(span => {\n            let style = window.getComputedStyle(span);\n            if (style.opacity === '0' && style.transition === 'opacity 1s ease-out 0s') {\n                span.setAttribute('spoiler', true);\n            }\n            if (style.marginBottom === '8px' && style.fontSize === '22px') {\n                span.setAttribute('header', true);\n            }\n        })\n\n        commentData = [];\n\n        let currentPath = [];\n        commentContainerElems.forEach((commentContainer) => {\n            let loadMoreElem = commentContainer?.children[0]?.children[0];\n            const commentElem = commentContainer?.children[0]?.children[0]?.children[0];\n\n            let depth = null;\n            let elemType = null;\n            if (loadMoreElem?.id?.startsWith('moreComments')) {\n                elemType = 'loadMore';\n                depth = loadMoreElem?.children?.[0]?.children?.length;\n            } else if (commentElem?.children?.[1]?.className?.startsWith('Comment')) {\n                elemType = 'comment';\n                depth = Math.max(0, commentElem?.children[0].children.length - 1);\n            } \n\n            let prevDepth = currentPath.length - 1;\n            if (depth > prevDepth) {\n                currentPath.push(0);\n            } else if (depth === prevDepth) {\n                currentPath[currentPath.length - 1] += 1;\n            } else {\n                currentPath = currentPath.slice(0, depth + 1);\n                currentPath[currentPath.length - 1] += 1;\n            }\n\n            if (elemType === 'loadMore') {\n                let parentPath = currentPath.slice(0, depth);\n                let parentComment = getComment(parentPath);\n                addComment(parentPath, {\n                    ...parentComment,\n                    loadMoreText: loadMoreElem.innerText,\n                    loadMore: new RemoteFn('commentLoadMore-' + currentPath.toString(), () => {\n                        loadMoreElem.querySelector('p').click();\n                    }),\n                });\n            } else if (elemType === 'comment') {\n                let didUpvote = commentElem.querySelector('[data-click-id=\"upvote\"][aria-pressed=\"true\"]');\n                let didDownvote = commentElem.querySelector('[data-click-id=\"downvote\"][aria-pressed=\"true\"]');\n                addComment(currentPath, {\n                    id: currentPath.join('-'),\n                    depth,\n                    html: commentElem.querySelector('[data-testid=\"comment\"]')?.innerHTML,\n                    author: commentElem.querySelector('[data-testid=\"comment_author_link\"]')?.innerText,\n                    timeSinceComment: commentElem.querySelector('[data-testid=\"comment_timestamp\"]')?.innerText,\n                    voteCount: commentElem.querySelector('[data-click-id=\"upvote\"]')?.nextSibling?.innerText,\n                    upVote: new RemoteFn('commentUpVote-' + currentPath.toString(), () => {\n                        commentElem.querySelector('[data-click-id=\"upvote\"]')?.click()\n                    }),\n                    downVote: new RemoteFn('commentDownVote-' + currentPath.toString(), () => {\n                        commentElem.querySelector('[data-click-id=\"downvote\"]')?.click()\n                    }),\n                    currentVote: (didUpvote ? 1 : 0) + (didDownvote ? -1 : 0),\n                    children: [],\n                });\n            }\n        });\n\n        debounce('comments', 500, 1500, () => {\n            emitMessage('comments', { comments: commentData });\n        });\n    });\n}\n;// CONCATENATED MODULE: ./injectedJS/watchers/PostDetails.js\n\n\n\n\n\nlet lastPlayButtonPressed = null;\n\nasync function postDetails() {\n    Watcher.watch('div[data-testid=\"post-container\"]', () => {\n        let postContainer = null;\n        if (document.querySelector('#overlayScrollContainer')) {\n            postContainer = document.querySelector('#overlayScrollContainer div[data-testid=\"post-container\"]');\n        } else {\n            postContainer = document.querySelector('div[data-testid=\"post-container\"]');\n        }\n        \n        const title = postContainer?.querySelector('h1')?.innerText;\n\n        if (!title) return;\n\n        // attempt to click video play buttons to open NSFW videos\n        const videoPlayButton = document.querySelector('path[d=\"M33.1 22.2l-11.5-6.7c-.3-.2-.7-.2-1 0-.3.2-.4.5-.4.8v13.4c0 .3.2.7.5.8.1.1.3.1.5.1s.3 0 .5-.1l11.5-6.7c.3-.2.5-.5.5-.8-.1-.3-.3-.6-.6-.8\"]')\n            ?.parentElement\n            ?.parentElement\n            ?.parentElement;\n        if (postContainer && videoPlayButton && lastPlayButtonPressed !== title) {\n            document.querySelector('path[d=\"M33.1 22.2l-11.5-6.7c-.3-.2-.7-.2-1 0-.3.2-.4.5-.4.8v13.4c0 .3.2.7.5.8.1.1.3.1.5.1s.3 0 .5-.1l11.5-6.7c.3-.2.5-.5.5-.8-.1-.3-.3-.6-.6-.8\"]')\n                .parentElement\n                .parentElement\n                .parentElement\n                .click();\n            lastPlayButtonPressed = title;\n        }\n\n        // Keeps gifs in comments from full screening automatically\n        document.querySelectorAll('video[autoplay]').forEach(elem => elem.setAttribute('playsInline', true));\n\n        const externalLink = postContainer.querySelector('[data-testid=\"outbound-link\"]')?.href;\n        let video = postContainer.querySelector('shreddit-player')?.src;\n\n        if (!video && externalLink?.includes('i.imgur.com')) {\n            video = externalLink.replace('.gifv', '.mp4');\n        }\n\n        let images = [];\n        let mediaContainer = postContainer.querySelector('[data-adclicklocation=\"title\"]').nextElementSibling;\n        if (mediaContainer?.attributes['data-click-id']?.value !== 'text') {\n            // Only grab the images if it isn't a text post. Otherwise, the images will already be \n            // handled by the text renderer.\n            [...mediaContainer.querySelectorAll('img.media-element')].forEach(p => images.push(p.src));\n            [...mediaContainer.querySelectorAll('figure img')].forEach(p => images.push(p.src));\n            images = images.filter(src => src).map(src => src.replace('https://preview.redd.it', 'https://i.redd.it'));\n        }\n        \n        const postDetails = {\n            title,\n            subreddit: window.location.href.split('/r/')[1]?.split('/')?.[0],\n            images,\n            video,\n            externalLink,\n            bodyHTML: postContainer.querySelector('[data-click-id=\"text\"]')?.innerHTML,\n            author: postContainer.querySelector('[data-testid=\"post_author_link\"]')?.innerText?.split('u/')?.[1],\n            voteCount: postContainer.querySelector('button[aria-label=\"upvote\"]')?.nextSibling?.innerText,\n            commentCount: postContainer.querySelector('.icon-comment')?.nextSibling?.innerText?.split(' ')?.[0],\n            timeSincePost: postContainer.querySelector('[data-testid=\"post_timestamp\"]')?.innerText,\n        };\n\n        debounce('postDetails', 500, 1500, () => {\n            emitMessage('postDetails', { postDetails });\n        });\n    });\n}\n;// CONCATENATED MODULE: ./injectedJS/watchers/Posts.js\n\n\n\n\n\nasync function posts() {\n    Watcher.watch('[data-scroller-first]', () => {\n        const postList = [...document.querySelectorAll('#AppRouter-main-content [data-scroller-first]')]\n            .slice(-1)[0]\n            .parentElement;\n\n        const postElems = [...postList.querySelectorAll('[data-testid=\"post-container\"]')];\n\n        // Trigger multi image posts to load all images\n        document.querySelectorAll('a[title=\"Next\"]').forEach(a => a.click());\n\n        const postData = postElems.map((post, i) => {\n            const externalLink = post.querySelector('[data-testid=\"outbound-link\"]')?.href;\n            let video = post.querySelector('shreddit-player')?.src;\n\n            if (!video && externalLink?.includes('i.imgur.com')) {\n                video = externalLink.replace('.gifv', '.mp4');\n            }\n            \n            return {\n                title: post.querySelector('h3')?.innerText,\n                postLink: [...post.querySelectorAll('a')].find(a => a.href.includes('/comments/'))?.href?.split('.com')?.[1],\n                subredditImg: post.querySelector('a > img')?.src,\n                subreddit: [...post.querySelectorAll('a')].find(a => a.href.includes('/r/'))?.href?.split('/r/')?.[1]?.split('/')?.[0],\n                images: [\n                    ...[...post.querySelectorAll('img.media-element')].map(p => p.src),\n                    ...[...post.querySelectorAll('figure img')].map(p => p.src),\n                ].filter(src => src).map(src => src.replace('https://preview.redd.it', 'https://i.redd.it')),\n                bodyText: [...post.querySelectorAll('p')].map(e => e?.innerText)?.join('\\n'),\n                video,\n                externalLink,\n                author: post.querySelector('[data-testid=\"post_author_link\"]')?.innerText?.split('u/')?.[1],\n                voteCount: post.querySelector('button[aria-label=\"upvote\"]')?.nextSibling?.innerText,\n                commentCount: post.querySelector('.icon-comment')?.nextSibling?.innerText?.split(' ')?.[0],\n                timeSincePost: post.querySelector('[data-testid=\"post_timestamp\"]')?.innerText,\n                isAd: !!post.querySelector('[data-adclicklocation=\"top_bar\"]')?.innerText?.includes('promoted'),\n\n                scrollTo: new RemoteFn('postScrollTo-' + i, () => {\n                    // Change this to a loadMore which just scrolls to the bottom of the current page\n                    // window.scrollTo(0, document.body.scrollHeight);\n                    const elemPos = post.getBoundingClientRect().bottom + window.scrollY;\n                    window.scrollTo(0, elemPos - 300);\n                }),\n                upvote: () => post.querySelector('.VotingBox__upvote')?.click(),\n                downvote: () => post.querySelector('.VotingBox__downvote')?.click(),\n                contextMenu: () => post.querySelector('.PostHeader__overflowMenu')?.click(),\n                open: new RemoteFn('postOpen-' + i, () => {\n                    post.click();\n                }),\n            }\n        });\n        debounce('posts', 500, 1500, () => {\n            emitMessage('posts', { posts: postData });\n        });\n    });\n}\n;// CONCATENATED MODULE: ./injectedJS/watchers/SubscriptionList.js\n\n\n\nasync function subscriptionList() {\n    Watcher.watch('div[role=\"menu\"]', (e) => {\n        const menu = document.querySelector('div[role=\"menu\"]');\n\n        const children = menu?.querySelectorAll(':scope > div,a');\n        \n        if (!children) return;\n\n        const subscriptions = {};\n        let currCategory = 'uncategorized';\n        for (let child of children) {\n            if (child.tagName === 'DIV') {\n                currCategory = child.textContent;\n                if (!subscriptions[currCategory]) {\n                    subscriptions[currCategory] = [];\n                }\n            } else {\n                subscriptions[currCategory].push({\n                    subreddit: child.textContent,\n                    url: child.getAttribute('href')\n                });\n            }\n        }\n\n        emitMessage('subscriptionList', { subscriptionList: subscriptions });\n    });\n}\n;// CONCATENATED MODULE: ./injectedJS/watchers/index.js\n\n\n\n\n\nfunction watchers() {\n    posts();\n    subscriptionList();\n    comments();\n    postDetails();\n}\n;// CONCATENATED MODULE: ./injectedJS/index.js\n\n\n\ntry {\n    initializers();\n    watchers();\n} catch (e) {\n    console.log('------------------');\n    console.log(e.toString());\n    console.log('------------------');\n}\n/******/ })()\n;\n";