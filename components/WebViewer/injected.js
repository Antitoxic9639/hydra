export default"\n/******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\nvar __webpack_exports__ = {};\n\n;// CONCATENATED MODULE: ./injectedJS/messaging/remoteFunction.js\nclass RemoteFn {\n    static remoteFunctions = {};\n\n    constructor(name, fn) {\n        this.name = name;\n        RemoteFn.remoteFunctions[name] = fn;\n    }\n\n    static execute(name, args) {\n        const parsedArgs = JSON.parse(args);\n        RemoteFn.remoteFunctions[name]?.(...parsedArgs);\n    }\n}\n\nwindow.RemoteFn = RemoteFn;\n;// CONCATENATED MODULE: ./injectedJS/messaging/emitMessage.js\n\n\nfunction emitMessage(msg, data) {\n    let stringified = JSON.stringify({ msg, data }, (key, value) => {\n        if (typeof value === 'function') {\n            return '[function] - did you mean to make a remote function?';\n        }\n        if (value instanceof RemoteFn) {\n            return '[remote function]: ' + value.name;\n        }\n        return value;\n    });\n    window.ReactNativeWebView.postMessage(stringified);\n}\n;// CONCATENATED MODULE: ./injectedJS/initializers/fixConsoleLog.js\n\n\nfunction fixConsoleLog() {\n    console.log = (...data) => {\n        if (data.length === 1) {\n            emitMessage\n            emitMessage('log', data[0]);\n        } else {\n            emitMessage('log', data);\n        }\n    };\n}\n;// CONCATENATED MODULE: ./injectedJS/watchers/Watcher.js\n\n\n\nclass Watcher {\n    static _observer = null;\n    static _callbacks = {};\n\n    static watch(selector, callback) {\n        const id = Math.random().toString(32).slice(2);\n        Watcher._callbacks[id] = { selector, callback };\n        return id;\n    }\n\n    static stop(id) {\n        delete Watcher._callbacks[id];\n    }\n\n    static watchOnce(selector) {\n        return new Promise(res => {\n            const watch = Watcher.watch(selector, (elem) => {\n                Watcher.stop(watch);\n                res(elem);\n            });\n        });\n    }\n\n    static _start() {\n        const observer = new MutationObserver(mutations => {\n            Object.values(Watcher._callbacks).forEach(value => {\n                const { selector, callback } = value;\n                const elem = document.querySelector(selector);\n                if (elem) {\n                    callback(elem);\n                }\n            });\n        });\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true\n        });\n    }\n}\n\nWatcher._start();\n;// CONCATENATED MODULE: ./injectedJS/initializers/killOpenAppMsg.js\n\n\nasync function killOpenAppMsg() {\n    const btnContainer = await Watcher.watchOnce('.XPromoPopupRpl__actions');\n    const btn = btnContainer.children[1].querySelector('.XPromoPopupRpl__actionButton');\n    btn.click();\n}\n;// CONCATENATED MODULE: ./injectedJS/helpers/simClick.js\nfunction triggerMouseEvent(node, eventType) {\n    let clickEvent = document.createEvent('MouseEvents');\n    clickEvent.initEvent(eventType, true, true);\n    node.dispatchEvent(clickEvent);\n}\n\nfunction simClick(element) {\n    [\"mouseover\", \"mousedown\", \"mouseup\", \"click\"].forEach(e =>\n        triggerMouseEvent(element, e)\n    );\n}\n;// CONCATENATED MODULE: ./injectedJS/initializers/openSubredditList.js\n\n\n\nasync function openSubredditList() {\n    const subredditBtn = await Watcher.watchOnce('[aria-label=\"Start typing to filter your communities or use up and down to select.\"] > button');\n    simClick(subredditBtn);\n}\n;// CONCATENATED MODULE: ./injectedJS/initializers/index.js\n\n\n\n\nfunction initializers() {\n    fixConsoleLog();\n    killOpenAppMsg();\n    openSubredditList();\n}\n;// CONCATENATED MODULE: ./injectedJS/watchers/Posts.js\n\n\n\n\nasync function posts() {\n    Watcher.watch('[data-scroller-first]', () => {\n        const postList = [...document.querySelectorAll('[data-scroller-first]')]\n            .slice(-1)[0]\n            .parentElement;\n\n        const postElems = [...postList.querySelectorAll('[data-testid=\"post-container\"]')];\n\n        // Trigger multi image posts to load all images\n        document.querySelectorAll('a[title=\"Next\"]').forEach(a => a.click());\n\n        const postData = postElems.map((post, i) => {\n            const externalLink = post.querySelector('[data-testid=\"outbound-link\"]')?.href;\n            let video = post.querySelector('shreddit-player')?.src;\n\n            if (!video && externalLink?.includes('i.imgur.com')) {\n                video = externalLink.replace('.gifv', '.mp4');\n            }\n            \n            return {\n                title: post.querySelector('h3')?.innerText,\n                postLink: [...post.querySelectorAll('a')].find(a => a.href.includes('/comments/'))?.href,\n                subredditImg: post.querySelector('a > img')?.src,\n                subreddit: [...post.querySelectorAll('a')].find(a => a.href.includes('/r/'))?.href?.split('/r/')?.[1]?.split('/')?.[0],\n                images: [\n                    post.querySelector('img[alt=\"Post image\"]')?.src,\n                    ...[...post.querySelectorAll('figure > div > img')].map(p => p.src),\n                ].filter(src => src),\n                bodyText: [...post.querySelectorAll('p')].map(e => e?.innerText)?.join('\\n'),\n                video,\n                externalLink,\n                author: post.querySelector('[data-testid=\"post_author_link\"]')?.innerText?.split('u/')?.[1],\n                voteCount: post.querySelector('button[aria-label=\"upvote\"]')?.nextSibling?.innerText,\n                commentCount: post.querySelector('.icon-comment')?.nextSibling?.innerText?.split(' ')?.[0],\n                timeSincePost: post.querySelector('[data-testid=\"post_timestamp\"]')?.innerText,\n                isAd: !!post.querySelector('[data-adclicklocation=\"top_bar\"]')?.innerText?.includes('promoted'),\n\n                scrollTo: new RemoteFn('postScrollTo-' + i, () => {\n                    // Change this to a loadMore which just scrolls to the bottom of the current page\n                    // window.scrollTo(0, document.body.scrollHeight);\n                    const elemPos = post.getBoundingClientRect().bottom + window.scrollY;\n                    window.scrollTo(0, elemPos - 300);\n                }),\n                upvote: () => post.querySelector('.VotingBox__upvote')?.click(),\n                downvote: () => post.querySelector('.VotingBox__downvote')?.click(),\n                contextMenu: () => post.querySelector('.PostHeader__overflowMenu')?.click(),\n            }\n        });\n\n        emitMessage('posts', { posts: postData });\n    });\n}\n;// CONCATENATED MODULE: ./injectedJS/watchers/SubscriptionList.js\n\n\n\nasync function subscriptionList() {\n    Watcher.watch('div[role=\"menu\"]', (e) => {\n        const menu = document.querySelector('div[role=\"menu\"]');\n\n        const children = menu?.querySelectorAll(':scope > div,a');\n        \n        if (!children) return;\n\n        const subscriptions = {};\n        let currCategory = 'uncategorized';\n        for (let child of children) {\n            if (child.tagName === 'DIV') {\n                currCategory = child.textContent;\n                if (!subscriptions[currCategory]) {\n                    subscriptions[currCategory] = [];\n                }\n            } else {\n                subscriptions[currCategory].push({\n                    subreddit: child.textContent,\n                    url: child.getAttribute('href')\n                });\n            }\n        }\n\n        emitMessage('subscriptionList', { subscriptionList: subscriptions });\n    });\n}\n;// CONCATENATED MODULE: ./injectedJS/watchers/index.js\n\n\n\n\nfunction watchers() {\n    posts();\n    subscriptionList();\n}\n;// CONCATENATED MODULE: ./injectedJS/index.js\n\n\n\ntry {\n    initializers();\n    watchers();\n} catch (e) {\n    console.log('------------------');\n    console.log(e.toString());\n    console.log('------------------');\n}\n/******/ })()\n;\n";